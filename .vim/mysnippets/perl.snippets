snippet #! "hash bang"
#!perl

use strict;
use warnings;
use 5.010;

$0
endsnippet


snippet export "EXPORT"
use base 'Exporter';
our @EXPORT_OK = qw( ${1:${VISUAL}} );
$0
endsnippet

snippet lib "use lib"
# perl somedir/bin/app.pl and want include somedir/lib
use File::Basename qw(dirname);
use Cwd qw(abs_path);
use lib dirname(dirname abs_path \$0) . '/lib';$0
endsnippet

snippet #!t "hash bang for test"
#!perl

use strict;
use warnings;
use Test::More;


$0

done_testing;

__END__
endsnippet

snippet const "constant"
use constant {
	${1:${VISUAL}}$0
};
endsnippet

snippet hconst "constant hash"
sub ${1:NAME} {
	state $h = {
		${2:${VISUAL}}$0
	};
	return $h->{ +shift };
};
endsnippet

snippet while "while"
while ( ${1:expression} ) {
	${2:${VISUAL}}$0
}
endsnippet

snippet for "for"
foreach my $${1:var} ( ${2:expression} ) {
	${3:${VISUAL}}$0
}
endsnippet

snippet fore "for extended"
for (my $${1:i} = 0; $$1 < ${2:limit}; $$1++ ) {
	${3:${VISUAL}}$0
}
endsnippet

snippet if "if"
if ( $${1:condition} ) {
	${2:${VISUAL}}$0
}
endsnippet

snippet ife "ife"
if ( $${1:condition} ) {
	${2:${VISUAL}}
}
else {
	${3}$0
}
endsnippet

snippet iff "iff"
if ( $${1:condition} ) {
	${2:${VISUAL}}
}
elsif ( ${3:condition} ) {
	${4}$0
}
endsnippet

snippet unless "unless"
${1:what?} unless ${2:${VISUAL:cond}}$0
endsnippet

snippet eval "eval"
eval {
	${1:${VISUAL:cond}}$0
	1;
} or do {
	my $error = $@ || 'Unknown Error';
	print STDERR "Failed with error: $error\n";
};
endsnippet

snippet try "try"
try {
	${1:${VISUAL:die MyError->new(..)}};
}
catch {
	when ( ${2:qr//} ) { ${3:warn ''}; }
	default { warn "caught error: $_"; }    # not $@
};
endsnippet

snippet when "when"
when ( '$${1:value}' ) { ${2:${VISUAL}}; ${3:continue;}$0 }
endsnippet


snippet dump "Dumper tidy"
eval { require Data::Dumper; print STDERR "[DEBUG START] #`whoami` - `date '+%Y.%m.%d %H:%M' `\n" . Data::Dumper::Dumper( ${0:${VISUAL}}) . '[DEBUG END]'; };
endsnippet

snippet debug "debug mojo"
$self->app->log->debug("${1:${VISUAL}}"$0);
endsnippet

snippet sub "sub"
sub ${1:name} {
	my ( $${2:self} ) = ${3:@_};

	${4:# body ...}
	return$0;
}
endsnippet

snippet base "Export package methods"
use base qw( $0 );
endsnippet

snippet new "package constructor"
sub new {
	my ( $class, @args ) = @_;

	return bless {
		${1:d => 'value',}
		@args,
	}, $class;
}
endsnippet

snippet open "open"
open my $fh, '<:encoding(UTF-8)', ${1:${VISUAL:filename}} or die;
endsnippet

# Test::More related **START**

snippet require "require_ok test"
require_ok ${1:${VISUAL:module}};
endsnippet

snippet use "use_ok test"
BEGIN { use_ok('${1:${VISUAL:module}}') }
endsnippet

snippet isa "isa_ok test"
isa_ok ${1:obj}, '${2:${VISUAL:module}}'$0;
endsnippet

snippet can "can_ok test"
can_ok ${1:${VISUAL:module}}, qw{ ${2:methods} }$0;
endsnippet

snippet is "is test"
is ${1:${VISUAL:got}}, ${2:expected}$0;
endsnippet

snippet isnt "isnt test"
isnt ${1:${VISUAL:got}}, ${2:expected}$0;
endsnippet

snippet ok "ok test"
ok ${1:${VISUAL:test}};
endsnippet

snippet like "like test"
like ${1:${VISUAL:got}}, qr/${2:expected}/$0;
endsnippet

snippet unlike "unlike test"
unlike ${1:${VISUAL:got}}, qr/${2:expected}/$0;
endsnippet

snippet is_deeply "is_deeply test"
is_deeply ${1:${VISUAL:this}}, ${2:that}$0;
endsnippet

snippet timefor "timex for block of code (sub)"
use Time::HiRes qw/ tv_interval gettimeofday /;

sub timefor(&$) {
	my $start = [gettimeofday];
	$_[0]->();
	explain sprintf "$_[1]: took %s time" => tv_interval($start);
}$0
endsnippet

snippet timeit "timex for block of code (call)"
timefor {
	${1:${VISUAL:this}}
}
'${2:block name}';
endsnippet

# Test::More related **ENDS**

snippet moose "Moose package"
package ${1:Package::Name};

use Moose;
use namespace::autoclean;

with 'Throwable';

${2:# extends, with, requires, attributes, etc}

${0:# methods}

__PACKAGE__->meta->make_immutable;

no Moose; 1;

__END__
endsnippet

snippet with "with Moose role"
with qw( ${0:role} );
endsnippet

snippet extends "inheritance Moose extends"
extends '${0:role}';
endsnippet

snippet override "override Moose method"
override ${1:name} => sub {
	my $self = shift;

	${2:${VISUAL:cond}}$0

	super();
};
endsnippet

snippet after "after Moose modifier"
after '${1:attr}' => sub {
	my $self = shift;

	${2:# return values are ignored}$0
};
endsnippet

snippet before "before Moose modifier"
before '${1:attr}' => sub {
	my $self = shift;

	${2:# return values are ignored}$0
};
endsnippet

snippet around "around Moose modifier"
around '${1:attr}' => sub {
	my $orig = shift;
	my $self = shift;

	${2:return $self->$orig() unless @_;}$0
};
endsnippet

snippet inner "Moose inner and augment modifiers"
augment '${1:method}' => sub {
	my $self = shift;

	my $modified = ${2:inner()}$0;

	return $modified;
};
endsnippet

#has '${1:name}' => ( is => '${2:ro|rw|bare}', isa => '${3:Str}$0');
snippet has "has Moose attribute"
has '${1:name}' => ( is => '${2:ro|rw|lazy}' );
endsnippet

snippet subtype "subtype Moose type"
subtype '${1:Type}' => ( as '${2:Object}' => where { $_->isa( '${3:HTTP::Headers}$0' ) } );
endsnippet

snippet coerce "coerce Moose type"
coerce __PACKAGE__ => (
	from '${1:Num}' => via {
		__PACKAGE__->new( ${2:attr} => ${3:$_}$0 );
	}
);
endsnippet

snippet overload "overlad Moose type"
use overload (
	# '@{}'    => sub { $_[0]->to_array },
	'""'     => sub { $_[0]->as_string },
	'0+'     => sub { $_[0]->${0:attr} },
	fallback => 1,
);
endsnippet

# Moo

snippet throw "Throwable throw"
$self->throw({ ${0:${VISUAL}} });
endsnippet

snippet moo "Moo class"
package ${1:# Package Name};

use Moo;
with 'Throwable';

has ${2:attr} => (
	is  => '${3:ro|rw|lazy}',
);

sub ${4:name} {
	my ($self) = @_;

	${5:# body..}$0
}

1;

__END__
endsnippet

snippet package "package"
package ${1:name}

use strict;
use warnings;
use 5.010;

use Carp;
use Try::Tiny;


$0

1;

__END__
endsnippet

snippet psgi "PSGI"
#!perl

use strict;
use warnings;
use 5.010;

use Plack::Builder;
use Plack::Session;

${1:use}
my $${2:app} = ${3};

builder {
	enable 'Session', store => 'File';

	mount '/' => $2$0;
};
endsnippet


snippet pod "poddoc"
=pod

=head1 NAME

${1:My::Module - An example module}

=head1 SYNOPSIS

  ${2:use My::Module}

=head1 DESCRIPTION

  ${3:...}

=head2 Methods

=over 4

=item C<new>

Returns a new ${4:My::Module} object.

=back

=head1 LICENSE

This module is licensed under the same terms as Perl itself.

=head1 AUTHOR

Bolila - L<http://bolila.com/>

=head1 SEE ALSO

${0:L<perlpod>, L<perlpodspec>}

=cut
endsnippet
