priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal


snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
		$0
}
endsnippet

snippet main "main function"
public static void main (${1:String[]} ${2:args}) {
		${VISUAL}$0
}
endsnippet


# constants

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

# double brace initialization
snippet coc "constant collection" b
private static final Set<String> $1 = new HashSet<String>() {{
	add("$2");$0
}}
endsnippet

# print out

snippet pr "println"
System.out.println("$0");
endsnippet

snippet pf "printf"
System.out.printf("$1", $2${VISUAL});$0
endsnippet


# control structures

snippet fore "for (each)" b
for (${1:int} $2 : $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet ife "if else" b
if ($1)`!p nl(snip)`{
	$2
} else {
	$0${VISUAL}
}
endsnippet


# Junit assertions

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};$0
endsnippet

snippet at "assert true" b
assertTrue(${1:actual});$0
endsnippet

snippet af "assert false" b
assertFalse(${1:actual});$0
endsnippet

snippet ae "assert equals" b
assertEquals(${1:expected}, ${2:actual});$0
endsnippet

# vim:ft=snippets:# vim:ft=snippets:
