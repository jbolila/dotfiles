snippet ! "shebang js"
'use strict';

${0:${VISUAL:#code here}}
endsnippet

snippet r "require"
var $1 = require('${0:$1}');
endsnippet

snippet () "IIFE"
(function() {
	'use strict';

	${0:${VISUAL:#code here}}
})();
endsnippet

snippet str "stringify"
JSON.stringify(${1:${VISUAL:#var}}, null, 4)$0
endsnippet

snippet d "dump"
debug(JSON.stringify(${1:${VISUAL:#var}}, null, 4));$0
endsnippet

snippet dl "dump"
console.log(JSON.stringify(${1:${VISUAL:#var}}, null, 4));$0
endsnippet

# Angular snippets:

snippet ng-m "Angular module"
(function() {
	'use strict';

	angular.module('$1', [$0]);
})();
endsnippet

snippet ng-c "Angular Controller"
(function() {
	'use strict';

	angular.module('$1').controller('$2', $2);

	/* @ngInject */
	function $2($3) {
		var vm = this;
		$4
		activate();

		function activate() {
			${0:${VISUAL:#code here}}
		}
	}
})();
endsnippet

snippet ng-d "Angular Directive"
(function() {
	'use strict';

	angular.module('$1').directive('$2', $2);

	/* @ngInject */
	function $2() {
		var directive = {
			link: link,
			scope: {
				$2: '='
			}
		};

		return directive;

		function link(scope, element) {
			${0:${VISUAL:#code here}}
		}
	}
})();
endsnippet

snippet ng-f "Angular Factory"
(function() {
	'use strict';

	angular.module('$1').factory('$2', $2);

	/* @ngInject */
	function $2($3) {
		var $4;

		return $4;

		function link(scope, element) {
			${0:${VISUAL:#code here}}
		}
	}
})();
endsnippet

snippet ng-fi "Angular Filter"
(function() {
	'use strict';

	angular.module('$1').filter('$2', $2);

	/* @ngInject */
	function $2($3) {
		var $4;

		return $4;

		function link(scope, element) {
			${0:${VISUAL:#code here}}
		}
	}
})();
endsnippet

# End Angular snippets:

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet fori "for in"
for (var ${1:index} in $2) {
	${3:$2[$1]}${VISUAL}$0
}
endsnippet

snippet fori "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0, len = ${1:Things}.length; $2 < len; $2++) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet fn "function (fn)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet exp "IIFE to create a class and attach to global namespace"
(function(exports) {
    'use strict';

    function ${1:ClassName}(${2:argument}) {
        ${VISUAL:this.}$0
    }
    exports.$1 = $1;

    $1.prototype = {
        ${3:methodname}: function(${4:argument}) {
            if (!$4)
                throw new Error("missing argument");
            return $4;
        }
    };
})(this);
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
  ${2://code}
} else {
  ${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
  ${VISUAL}$0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
  ${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${VISUAL}$0);
endsnippet

snippet cd "console.dir"
console.dir(${1:'${2:value}'});
endsnippet

snippet ct "console.table"
console.table(${1:'${2:value}'});
endsnippet

snippet cw "console.warn"
console.warn(${1:'${2:value}'});
endsnippet

snippet ce "console.error"
console.error(${1:'${2:value}'});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:'${3:message}'});
endsnippet

snippet cgroup "console.group"
console.group('${1:label}');
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time('${1:label}');
${VISUAL}$0
console.timeEnd('$1');
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp('${1:label}')
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
(function() {
  'use strict';

  define([${1:'deppendencies'}],
  function(${2:arguments}) {
    $0
  });
}());
endsnippet

snippet req "require an AMD module"
(function() {
  'use strict';

  require([${1:'dependencies'}], function(${2:callback}) {
    $0
  });
}());
endsnippet

snippet ld "$log.debug()"
$log.debug(${VISUAL}$0);
endsnippet

snippet ll "$log.log()"
$log.log(${VISUAL}$0);
endsnippet

snippet le "$log.error()"
$log.error(${VISUAL}$0);
endsnippet

# vim:ft=snippets:
