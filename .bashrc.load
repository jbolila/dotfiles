#!sh

export PATH=$PATH:$HOME/.rvm/bin:$HOME/local/bin

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

if [ /usr/share/terminfo/x/xterm-256color ]; then
	export TERM='xterm-256color'
else
	export TERM='xterm-color'
fi

export BROWSER="firefox"
export EDITOR="vim"

source ~/perl5/perlbrew/etc/bashrc

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
export rvm_ignore_gemrc_issues=1

[ -r "$HOME/.smartcd_config" ] && ( [ -n $BASH_VERSION ] || [ -n $ZSH_VERSION ] ) && source ~/.smartcd_config

[ -f "$HOME/.dircolors/dircolors.jellybeans" ] && eval `dircolors -b $HOME/.dircolors/dircolors.jellybeans`

# PS1='[\u@\h \W]\$ '
# . $HOME/.git_branch_prompt.sh
source ~/local/bash-git-prompt/gitprompt.sh

. $HOME/local/bin/z.sh

[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec ssh-agent startx
[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec echo 'SSH AGENT!!!!!'
# [[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec ssh-agent -s

# Alias:

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -f ~/.bash_private ]; then
    . ~/.bash_private
fi

# Functions:

up () {
  local perl=$1
  if [ $perl ]; then
    perlbrew use $perl@std
  fi
  local current=$(perlbrew list | grep \* | sed -e 's/\* //' )
  echo "Current perl is $current"
}

function listen {
  lsof -n -i4TCP:${@:-'8080'} | grep LISTEN
}

function g {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status --short --branch
  fi
  #  git ${@:-'status --short --branch'}
}

function p {
  if [[ $# > 0 ]]; then
    zathura $@
  else
    echo 'zathura! what is the pdf to open?'
  fi
  #  git ${@:-'status --short --branch'}
}
###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if type complete &>/dev/null; then
  _npm_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###
